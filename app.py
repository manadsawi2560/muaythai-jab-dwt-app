# app.py
import os, json, time, uuid
from pathlib import Path
import streamlit as st

from src.pipeline import run_pipeline

st.set_page_config(page_title="MuayThai Jab DWT (Tempo-Invariant)", layout="wide")
st.title("ü•ä MuayThai Jab Analyzer (BlazePose + DTW) ‚Äî Tempo-Invariant")

# ---------- paths ----------
ROOT = Path(__file__).parent
CFG_PATH = ROOT / "configs" / "jab_left.yaml"
UPLOADS_DIR = ROOT / "uploads"
OUTPUTS_DIR = ROOT / "outputs"
UPLOADS_DIR.mkdir(exist_ok=True)
OUTPUTS_DIR.mkdir(exist_ok=True)

# ---------- session state init ----------
for k, v in {
    "coach_path": None,
    "student_path": None,
    "res": None,           # dict ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå pipeline (‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏•‡∏≠‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
    "run_id": None,        # ‡πÑ‡∏ß‡πâ‡∏ó‡∏≥‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Å‡∏±‡∏ô
}.items():
    if k not in st.session_state:
        st.session_state[k] = v

# ---------- uploader ----------
col1, col2 = st.columns(2)
coach_file = col1.file_uploader("‡πÇ‡∏Ñ‡πâ‡∏ä (mp4/mov/mkv)", type=["mp4","mov","mkv"], key="coach_upl")
student_file = col2.file_uploader("‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (mp4/mov/mkv)", type=["mp4","mov","mkv"], key="student_upl")

def save_to_uploads(upfile, prefix):
    ext = Path(upfile.name).suffix.lower() or ".mp4"
    fname = f"{prefix}_{int(time.time())}_{uuid.uuid4().hex[:8]}{ext}"
    fpath = UPLOADS_DIR / fname
    with open(fpath, "wb") as f:
        f.write(upfile.read())
    return str(fpath)

# ---------- action buttons ----------
run_col, reset_col = st.columns([1,1])
run_clicked = run_col.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", type="primary")
reset_clicked = reset_col.button("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏ô‡πâ‡∏≤", type="secondary")

if reset_clicked:
    st.session_state["coach_path"] = None
    st.session_state["student_path"] = None
    st.session_state["res"] = None
    st.session_state["run_id"] = None
    st.rerun()

# ‡∏Å‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• => ‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏≤‡∏ß‡∏£ + ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å pipeline + ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á session_state
if run_clicked:
    if not coach_file or not student_file:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô")
    else:
        try:
            coach_path = save_to_uploads(coach_file, "coach")
            student_path = save_to_uploads(student_file, "student")
            st.session_state["coach_path"] = coach_path
            st.session_state["student_path"] = student_path
            st.session_state["run_id"] = uuid.uuid4().hex[:8]

            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
                res = run_pipeline(coach_path, student_path, str(CFG_PATH), outputs_dir=str(OUTPUTS_DIR))
            st.session_state["res"] = res
            st.success("‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")
        except Exception as e:
            st.exception(e)

# ---------- show results from session_state (‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏™‡πÑ‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå) ----------
res = st.session_state.get("res")
if res:
    st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    st.json(res, expanded=False)

    # ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    video_path = res.get("outputs", {}).get("video")
    if video_path and os.path.exists(video_path):
        st.subheader("‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (Side-by-side along DTW path)")
        # st.video ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö path ‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á ‡πÜ
        st.video(video_path)
        # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        with open(video_path, "rb") as vf:
            st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠", data=vf, file_name=Path(video_path).name, mime="video/mp4")
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
        if res.get("errors", {}).get("render"):
            st.error(f"Render error: {res['errors']['render']}")

    # ‡∏™‡πÑ‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤ DTW (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ ‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà)
    st.subheader("‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏î‡∏π‡∏ó‡∏µ‡∏•‡∏∞ progress/frame (‡∏ï‡∏≤‡∏° DTW path)")
    path_len = int(res.get("path_len", 0))
    if path_len > 0:
        idx = st.slider("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô DTW path", 0, path_len - 1, 0)
        st.caption("‡∏™‡πÑ‡∏•‡∏î‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏π‡πà‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡πÄ‡∏ü‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏ä/‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢ DTW")
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏π‡πà index ‡πÄ‡∏â‡∏¢ ‡πÜ (‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô renderer ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ü‡∏£‡∏°)
        st.write({"dtw_index": idx})
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DTW path")
else:
    st.info("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
